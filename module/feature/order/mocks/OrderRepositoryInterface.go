// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "ruti-store/module/entities"
	domain "ruti-store/module/feature/order/domain"

	mock "github.com/stretchr/testify/mock"

	snap "github.com/midtrans/midtrans-go/snap"
)

// OrderRepositoryInterface is an autogenerated mock type for the OrderRepositoryInterface type
type OrderRepositoryInterface struct {
	mock.Mock
}

// AcceptOrder provides a mock function with given fields: orderID, orderStatus
func (_m *OrderRepositoryInterface) AcceptOrder(orderID string, orderStatus string) error {
	ret := _m.Called(orderID, orderStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orderID, orderStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckTransaction provides a mock function with given fields: orderID
func (_m *OrderRepositoryInterface) CheckTransaction(orderID string) (domain.Status, error) {
	ret := _m.Called(orderID)

	var r0 domain.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Status, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Status); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(domain.Status)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCart provides a mock function with given fields: newCart
func (_m *OrderRepositoryInterface) CreateCart(newCart *entities.CartModels) (*entities.CartModels, error) {
	ret := _m.Called(newCart)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.CartModels) (*entities.CartModels, error)); ok {
		return rf(newCart)
	}
	if rf, ok := ret.Get(0).(func(*entities.CartModels) *entities.CartModels); ok {
		r0 = rf(newCart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.CartModels) error); ok {
		r1 = rf(newCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: newOrder
func (_m *OrderRepositoryInterface) CreateOrder(newOrder *entities.OrderModels) (*entities.OrderModels, error) {
	ret := _m.Called(newOrder)

	var r0 *entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.OrderModels) (*entities.OrderModels, error)); ok {
		return rf(newOrder)
	}
	if rf, ok := ret.Get(0).(func(*entities.OrderModels) *entities.OrderModels); ok {
		r0 = rf(newOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.OrderModels) error); ok {
		r1 = rf(newOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnap provides a mock function with given fields: orderID, name, email, totalAmountPaid
func (_m *OrderRepositoryInterface) CreateSnap(orderID string, name string, email string, totalAmountPaid uint64) (*snap.Response, error) {
	ret := _m.Called(orderID, name, email, totalAmountPaid)

	var r0 *snap.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, uint64) (*snap.Response, error)); ok {
		return rf(orderID, name, email, totalAmountPaid)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, uint64) *snap.Response); ok {
		r0 = rf(orderID, name, email, totalAmountPaid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snap.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, uint64) error); ok {
		r1 = rf(orderID, name, email, totalAmountPaid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartItem provides a mock function with given fields: cartItemID
func (_m *OrderRepositoryInterface) DeleteCartItem(cartItemID uint64) error {
	ret := _m.Called(cartItemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(cartItemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrdersByUserID provides a mock function with given fields: userID, page, pageSize
func (_m *OrderRepositoryInterface) GetAllOrdersByUserID(userID uint64, page int, pageSize int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(userID, page, pageSize)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(userID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []*entities.OrderModels); ok {
		r0 = rf(userID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) int64); ok {
		r1 = rf(userID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint64, int, int) error); ok {
		r2 = rf(userID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllOrdersSearch provides a mock function with given fields: page, perPage, name
func (_m *OrderRepositoryInterface) GetAllOrdersSearch(page int, perPage int, name string) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(page, perPage, name)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.OrderModels, int64, error)); ok {
		return rf(page, perPage, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.OrderModels); ok {
		r0 = rf(page, perPage, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, name)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllOrdersUserWithFilter provides a mock function with given fields: userID, orderStatus, page, pageSize
func (_m *OrderRepositoryInterface) GetAllOrdersUserWithFilter(userID uint64, orderStatus string, page int, pageSize int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(userID, orderStatus, page, pageSize)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(userID, orderStatus, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(userID, orderStatus, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, string, int, int) int64); ok {
		r1 = rf(userID, orderStatus, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint64, string, int, int) error); ok {
		r2 = rf(userID, orderStatus, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCartByID provides a mock function with given fields: cartID
func (_m *OrderRepositoryInterface) GetCartByID(cartID uint64) (*entities.CartModels, error) {
	ret := _m.Called(cartID)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CartModels, error)); ok {
		return rf(cartID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CartModels); ok {
		r0 = rf(cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByUserID provides a mock function with given fields: userID
func (_m *OrderRepositoryInterface) GetCartByUserID(userID uint64) ([]*entities.CartModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.CartModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.CartModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItem provides a mock function with given fields: userID, productID
func (_m *OrderRepositoryInterface) GetCartItem(userID uint64, productID uint64) (*entities.CartModels, error) {
	ret := _m.Called(userID, productID)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (*entities.CartModels, error)); ok {
		return rf(userID, productID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) *entities.CartModels); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: orderID
func (_m *OrderRepositoryInterface) GetOrderByID(orderID string) (*entities.OrderModels, error) {
	ret := _m.Called(orderID)

	var r0 *entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.OrderModels, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.OrderModels); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedOrders provides a mock function with given fields: page, pageSize
func (_m *OrderRepositoryInterface) GetPaginatedOrders(page int, pageSize int) ([]*entities.OrderModels, error) {
	ret := _m.Called(page, pageSize)

	var r0 []*entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.OrderModels, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.OrderModels); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalItems provides a mock function with given fields:
func (_m *OrderRepositoryInterface) GetTotalItems() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProductFromCart provides a mock function with given fields: userID, productID
func (_m *OrderRepositoryInterface) RemoveProductFromCart(userID uint64, productID uint64) error {
	ret := _m.Called(userID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCartItem provides a mock function with given fields: cartItem
func (_m *OrderRepositoryInterface) UpdateCartItem(cartItem *entities.CartModels) error {
	ret := _m.Called(cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.CartModels) error); ok {
		r0 = rf(cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: orderID, orderStatus
func (_m *OrderRepositoryInterface) UpdateOrderStatus(orderID string, orderStatus string) error {
	ret := _m.Called(orderID, orderStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orderID, orderStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayment provides a mock function with given fields: orderID, orderStatus, paymentStatus
func (_m *OrderRepositoryInterface) UpdatePayment(orderID string, orderStatus string, paymentStatus string) error {
	ret := _m.Called(orderID, orderStatus, paymentStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orderID, orderStatus, paymentStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepositoryInterface creates a new instance of OrderRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryInterface {
	mock := &OrderRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
