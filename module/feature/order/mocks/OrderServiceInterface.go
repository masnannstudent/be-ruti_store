// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "ruti-store/module/entities"
	domain "ruti-store/module/feature/order/domain"

	mock "github.com/stretchr/testify/mock"
)

// OrderServiceInterface is an autogenerated mock type for the OrderServiceInterface type
type OrderServiceInterface struct {
	mock.Mock
}

// AcceptOrder provides a mock function with given fields: orderID
func (_m *OrderServiceInterface) AcceptOrder(orderID string) error {
	ret := _m.Called(orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallBack provides a mock function with given fields: req
func (_m *OrderServiceInterface) CallBack(req map[string]interface{}) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCart provides a mock function with given fields: userID, req
func (_m *OrderServiceInterface) CreateCart(userID uint64, req *domain.CreateCartRequest) (*entities.CartModels, error) {
	ret := _m.Called(userID, req)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *domain.CreateCartRequest) (*entities.CartModels, error)); ok {
		return rf(userID, req)
	}
	if rf, ok := ret.Get(0).(func(uint64, *domain.CreateCartRequest) *entities.CartModels); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *domain.CreateCartRequest) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: userID, request
func (_m *OrderServiceInterface) CreateOrder(userID uint64, request *domain.CreateOrderRequest) (*domain.CreateOrderResponse, error) {
	ret := _m.Called(userID, request)

	var r0 *domain.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *domain.CreateOrderRequest) (*domain.CreateOrderResponse, error)); ok {
		return rf(userID, request)
	}
	if rf, ok := ret.Get(0).(func(uint64, *domain.CreateOrderRequest) *domain.CreateOrderResponse); ok {
		r0 = rf(userID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *domain.CreateOrderRequest) error); ok {
		r1 = rf(userID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderCart provides a mock function with given fields: userID, request
func (_m *OrderServiceInterface) CreateOrderCart(userID uint64, request *domain.CreateOrderCartRequest) (*domain.CreateOrderResponse, error) {
	ret := _m.Called(userID, request)

	var r0 *domain.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *domain.CreateOrderCartRequest) (*domain.CreateOrderResponse, error)); ok {
		return rf(userID, request)
	}
	if rf, ok := ret.Get(0).(func(uint64, *domain.CreateOrderCartRequest) *domain.CreateOrderResponse); ok {
		r0 = rf(userID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *domain.CreateOrderCartRequest) error); ok {
		r1 = rf(userID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartItems provides a mock function with given fields: cartID
func (_m *OrderServiceInterface) DeleteCartItems(cartID uint64) error {
	ret := _m.Called(cartID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrders provides a mock function with given fields: page, pageSize
func (_m *OrderServiceInterface) GetAllOrders(page int, pageSize int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(page, pageSize)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.OrderModels); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllOrdersByUserID provides a mock function with given fields: userID, page, pageSize
func (_m *OrderServiceInterface) GetAllOrdersByUserID(userID uint64, page int, pageSize int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(userID, page, pageSize)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(userID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []*entities.OrderModels); ok {
		r0 = rf(userID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) int64); ok {
		r1 = rf(userID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint64, int, int) error); ok {
		r2 = rf(userID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllOrdersWithFilter provides a mock function with given fields: userID, orderStatus, page, pageSize
func (_m *OrderServiceInterface) GetAllOrdersWithFilter(userID uint64, orderStatus string, page int, pageSize int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(userID, orderStatus, page, pageSize)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(userID, orderStatus, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(userID, orderStatus, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, string, int, int) int64); ok {
		r1 = rf(userID, orderStatus, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint64, string, int, int) error); ok {
		r2 = rf(userID, orderStatus, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCartById provides a mock function with given fields: cartID
func (_m *OrderServiceInterface) GetCartById(cartID uint64) (*entities.CartModels, error) {
	ret := _m.Called(cartID)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CartModels, error)); ok {
		return rf(cartID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CartModels); ok {
		r0 = rf(cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartUser provides a mock function with given fields: userID
func (_m *OrderServiceInterface) GetCartUser(userID uint64) ([]*entities.CartModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.CartModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.CartModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: orderID
func (_m *OrderServiceInterface) GetOrderByID(orderID string) (*entities.OrderModels, error) {
	ret := _m.Called(orderID)

	var r0 *entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.OrderModels, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.OrderModels); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersPage provides a mock function with given fields: currentPage, pageSize, totalItems
func (_m *OrderServiceInterface) GetOrdersPage(currentPage int, pageSize int, totalItems int) (int, int, int, error) {
	ret := _m.Called(currentPage, pageSize, totalItems)

	var r0 int
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int, int, error)); ok {
		return rf(currentPage, pageSize, totalItems)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(currentPage, pageSize, totalItems)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(currentPage, pageSize, totalItems)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) int); ok {
		r2 = rf(currentPage, pageSize, totalItems)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, int) error); ok {
		r3 = rf(currentPage, pageSize, totalItems)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SearchAndPaginateOrder provides a mock function with given fields: page, pageSize, name
func (_m *OrderServiceInterface) SearchAndPaginateOrder(page int, pageSize int, name string) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(page, pageSize, name)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.OrderModels, int64, error)); ok {
		return rf(page, pageSize, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.OrderModels); ok {
		r0 = rf(page, pageSize, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, pageSize, name)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, pageSize, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateOrderStatus provides a mock function with given fields: req
func (_m *OrderServiceInterface) UpdateOrderStatus(req *domain.UpdateOrderStatus) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UpdateOrderStatus) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderServiceInterface creates a new instance of OrderServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServiceInterface {
	mock := &OrderServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
